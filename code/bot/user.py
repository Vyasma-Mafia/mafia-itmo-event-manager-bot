from logging import exception
from unicodedata import category

from aiogram import Router, F
from aiogram.filters import Command, CommandStart, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

import bot.keyboards as kb
from bot.keyboards import CLUB_RATING_BUTTON_DATA, STARS_BUTTON_DATA, MY_ACHIEVMENTS_BUTTON_DATA, \
    PAIR_RATING_BUTTON_DATA
from database.requests import (check_ban, check_event_by_name, add_in_mailing, get_event_info_by_name, check_signup,
                               check_go_to_event, get_full_info_about_singup_user, change_signup_status,
                               add_signup_user,
                               get_count_of_events, check_is_signup_open, get_signup_people, get_user_profile,
                               save_user_profile, get_users_with_polemica_id, get_guest_count_for_event,
                               check_passes_sent)
from plugins.achievements import get_user_achievements_text, get_club_stars_achievements_text
from plugins.rating import get_club_rating
from plugins.research import get_pair_stat_text
from utils import setup_logger

logger = setup_logger()

# –ß—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å dispatcher 2-–π —Ä–∞–∑ –∑–∞–º–µ–Ω–∏–º –µ–≥–æ –Ω–∞ —Ä–æ—É—Ç–µ—Ä
user = Router()


# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å (—Ñ–∏–ª—å—Ç—Ä) –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–±–∞–Ω–µ–Ω-–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å


class BannedProtect(Filter):
    async def __call__(self, message: Message):
        return await check_ban(chat_id=message.from_user.id)


# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å (—Ñ–∏–ª—å—Ç—Ä) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è-–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è


class EventCheck(Filter):
    async def __call__(self, message: Message):
        return await check_event_by_name(event_name=message.text)


# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ


class EventSignUp(StatesGroup):
    event_name = State()
    full_name = State()
    id = State()
    level = State()
    username = State()
    confirm = State()


# ¬†–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


class ProfileEdit(StatesGroup):
    nickname = State()
    level = State()
    polemica_id = State()
    is_itmo = State()
    full_name = State()
    passport = State()
    phone = State()
    personal_data_agreement = State()


class Achievements(StatesGroup):
    submenu = State()
    category = State()


class PairRating(StatesGroup):
    choose = State()


# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∞–π–¥–∏


@user.message(Command("id"))
async def id_command(message: Message):
    await message.answer(f"–í–∞—à –∞–π–¥–∏: {message.from_user.id}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@user.message(BannedProtect())
async def show_message_to_ban_user(message: Message):
    await message.answer("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ!")


@user.message(CommandStart())
async def start_command(message: Message):
    await add_in_mailing(chat_id=message.from_user.id)
    sticker_id = "CAACAgIAAxkBAAEuSs5nBl1rNuFirPiPXjRVrUDOwTuMBgAClCEAApog6Ep3hdlbdFG1aTYE"
    await message.answer_sticker(sticker_id)
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!",
                         reply_markup=await kb.get_start_menu(rights="user"))


@user.message(Command("help"))
async def help_command(message: Message):
    links = [
        {
            'text': '–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–ª—É–±–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Polemica?',
            'link': 'https://t.me/mafia_itmo/54',
        },
        {
            'text': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö –∏–≥—Ä—ã',
            'link': 'https://t.me/mafia_itmo/64'
        }

    ]

    help_message = """<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏!</b>
    –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ—á–µ—Ä, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", –Ω–∞–∂–º–∏—Ç–µ "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–µ—á–µ—Ä. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–π–¥—ë—Ç–µ –Ω–∞ –≤–µ—á–µ—Ä, —Ç–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –ñ–¥—ë–º –≤–∞—Å –Ω–∞ –∏–≥—Ä–∞—Ö!
    \n–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
    """
    for link in links:
        help_message += f"\n\t- <a href='{link['link']}'>{link['text']}</a>"
    help_message += """\n–ì–æ—Å—Ç—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ñ–æ—Ä–º—É –Ω–∞ –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä <b>–¥–æ 11 —É—Ç—Ä–∞ —Å—Ä–µ–¥—ã.</b>
    –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–æ—Ä–º–∞ –ø–µ—Ä–µ–µ—Ö–∞–ª–∞ –Ω–∞ —è–Ω–¥–µ–∫—Å!
    """

    help_message += '\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\nü¶ã <a href="https://t.me/high_fly_bird">–≥–æ—Å–ø–æ–∂–∞ –§–∏–∞–ª–∫–∞</a>\nüö¥‚Äç‚ôÇÔ∏è <a href="https://t.me/MrAlex18">–≥–æ—Å–ø–æ–¥–∏–Ω –í–µ–ª–æ—Å–∏–ø–µ–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å</a>'

    await message.answer(help_message,
                         parse_mode="HTML",
                         reply_markup=await kb.get_start_menu(rights="user"))


@user.message(F.text == "üö´–û—Ç–º–µ–Ω–∞")
async def btn_cancel_click(message: Message, state: FSMContext):
    await state.set_state(EventSignUp.event_name)
    await message.answer("–û—Ç–º–µ–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=await kb.get_start_menu(rights="user"))


@user.message(F.text == "üë§–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def btn_contacts_click(message: Message):
    await message.answer("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:", reply_markup=kb.our_contacts)


@user.message(F.text == "üíª–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def btn_support_click(message: Message):
    await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:", reply_markup=kb.tech_support)


@user.message(F.text == "üåü–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–µ–π—Ç–∏–Ω–≥")
async def btn_my_achievements(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–º–µ–Ω—é",
                         parse_mode="HTML",
                         reply_markup=kb.achivement_rating_menu)
    return


@user.callback_query(F.data == MY_ACHIEVMENTS_BUTTON_DATA)
async def btn_my_achievements(callback_query: CallbackQuery, state: FSMContext):
    message = callback_query.message
    await message.chat.do("typing")
    usr = await get_user_profile(message.chat.id)
    if usr is None or usr.polemica_id is None:
        await message.answer("–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç polemica id",
                             reply_markup=await kb.get_start_menu(rights="user"))
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", parse_mode="HTML",
                             reply_markup=await kb.get_achievement_category_keyboard())
        await state.set_state(Achievements.category)
        await message.delete()
    return


@user.callback_query(Achievements.category)
async def btn_my_achievements_with_category(callback_query: CallbackQuery, state: FSMContext):
    message = callback_query.message
    await message.chat.do("typing")
    usr = await get_user_profile(message.chat.id)
    achievements_category = callback_query.data
    await message.answer(get_user_achievements_text(usr.polemica_id, achievements_category, True), parse_mode="HTML",
                         reply_markup=await kb.get_start_menu(rights="user"))
    await message.delete()
    await state.clear()
    return


@user.callback_query(F.data == STARS_BUTTON_DATA)
async def btn_stars(callback_query: CallbackQuery):
    message = callback_query.message
    await message.chat.do("typing")
    text = get_club_stars_achievements_text(list(await get_users_with_polemica_id()))
    await message.answer("".join(text), parse_mode="HTML",
                         reply_markup=await kb.get_start_menu(rights="user"))
    await message.delete()
    return


@user.callback_query(F.data == CLUB_RATING_BUTTON_DATA)
async def btn_rating(callback_query: CallbackQuery):
    message = callback_query.message
    await message.chat.do("typing")
    await message.answer(await get_club_rating(), parse_mode="HTML",
                         reply_markup=await kb.get_start_menu(rights="user"))
    await message.delete()
    return


@user.callback_query(F.data == PAIR_RATING_BUTTON_DATA)
async def btn_pair_rating(callback_query: CallbackQuery, state: FSMContext):
    message = callback_query.message
    await message.chat.do("typing")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ polemica id –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                         parse_mode="HTML",
                         reply_markup=None)
    await state.set_state(PairRating.choose)
    await message.delete()
    return


@user.message(PairRating.choose)
async def pair_rating(message: Message, state: FSMContext):
    await message.chat.do("typing")
    try:
        first_id, second_id = map(lambda it: int(it.strip()), message.text.split(","))
        logger.info(f"Pair rating req for {first_id}, {second_id} from {message.chat.id}")
        await message.answer(get_pair_stat_text(first_id, second_id),
                             parse_mode="HTML",
                             reply_markup=await kb.get_start_menu(rights="user"))
    except Exception as e:
        print(e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ id", reply_markup=await kb.get_start_menu(rights="user"))
    await state.clear()
    return


@user.message(F.text == "üéâ–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def btn_events_click(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    if await get_count_of_events() == 0:
        await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!",
                             reply_markup=await kb.get_events_names_buttons())


@user.message(F.text == "üëà–ù–∞–∑–∞–¥")
async def btn_back_click(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é", reply_markup=await kb.get_start_menu(rights="user"))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π


@user.message(F.text == "üîÑ–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def refresh_registered_users(message: Message, state: FSMContext):
    data = await state.get_data()
    event_name = data.get('event_name')
    if event_name:
        await btn_event_name_click(message, state, event_name)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–Ω–æ–≤–æ.")


@user.message(EventCheck())
async def btn_event_name_click(message: Message, state: FSMContext, event_name: str = None):
    event_info_for_message = '''üéâ–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_name}
üìÜ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{event_date}</b>
üéä–û–ø–∏—Å–∞–Ω–∏–µ: {event_desc}
üë§–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: <b>{event_limit} –∏–≥—Ä–æ–∫–æ–≤</b>
‚úèÔ∏è–ó–∞–ø–∏—Å—å: <b>{is_signup_open_str}</b>\n'''

    user_data_str = '''
üìÅ–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ :
üë§–ù–∏–∫: {signup_user_full_name}\n
'''

    registered_users_str = "\n–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{registered_users_list}\n"

    if event_name is None:
        event_name = message.text
        await state.set_state(EventSignUp.event_name)
        await state.update_data(event_name=event_name)
        # await message.answer_sticker("CAACAgIAAxkBAAEDpPBl1WcOfjU0kJaSf9y882BG36ONiwACMw4AApVxCUiC2Rae9Yv1wzQE")

    await state.set_state(EventSignUp.event_name)
    chat_id = message.from_user.id
    event_info = await get_event_info_by_name(event_name=event_name)
    event_date = event_info.date
    event_desc = event_info.description
    event_limit = event_info.limit
    is_signup_open = await check_is_signup_open(event_name=event_name)
    is_signup_open_str = "–æ—Ç–∫—Ä—ã—Ç–∞" if is_signup_open is not None else "–∑–∞–∫—Ä—ã—Ç–∞"
    event_status = 'unsigned' if is_signup_open is not None else ''
    guest_count = await get_guest_count_for_event(event_name=event_name)
    event_info_for_message += f"üë•–ì–æ—Å—Ç–µ–π: {guest_count}/{event_info.guest_limit}\n"
    
    # –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ—Ö–æ–¥–æ–∫
    passes_sent = await check_passes_sent(event_name=event_name)
    if passes_sent:
        event_info_for_message += "üö´ –ó–∞–ø–∏—Å—å –≥–æ—Å—Ç–µ–π –∑–∞–∫—Ä—ã—Ç–∞ (–ø—Ä–æ—Ö–æ–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)\n"

    # Get the list of registered users
    registered_users = await get_signup_people(event_name=event_name)

    # Create a string with the list of registered users
    registered_users_list = ""
    print(registered_users)
    nicks = registered_users['–ü–æ–ª–Ω–æ–µ –∏–º—è']
    tgs = registered_users['–ù–∏–∫–Ω–µ–π–º']
    levels = registered_users['–£—Ä–æ–≤–µ–Ω—å']
    colleges = registered_users['–≤—É–∑']
    is_signup_open_str = "–æ—Ç–∫—Ä—ã—Ç–∞" if len(nicks) < event_limit else "–∑–∞–∫—Ä—ã—Ç–∞"

    for i, (nick, level_id, username, college) in enumerate(zip(nicks, levels, tgs, colleges), start=1):
        level_symbol = next(
            (level['level_symbol'] for level in kb.LEVEL_DESCR if level['level_id'] == level_id), '')

        registered_users_list += f"{i}. {nick} {level_symbol} - @{username} - <i>{college}</i>\n"

    registered_users_str = registered_users_str.format(
        registered_users_list=registered_users_list)

    signup = await check_signup(event_name=event_name, chat_id=chat_id)
    if signup is None:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –∏–ª–∏ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞
        await message.answer(
            event_info_for_message.format(
                event_name=event_name,
                event_date=event_date,
                event_desc=event_desc,
                is_signup_open_str=is_signup_open_str,
                event_limit=event_limit
            ) + registered_users_str,
            parse_mode="HTML",
            reply_markup=await kb.get_event_menu(rights="user", event_status="unsigned", event_name=event_name)
        )
    else:
        full_info_about_signup_user = await get_full_info_about_singup_user(event_name=event_name, chat_id=chat_id)
        signup_user_full_name = full_info_about_signup_user.full_name

        if await check_go_to_event(event_name=event_name, chat_id=chat_id) is not None:
            await message.answer(
                event_info_for_message.format(event_name=event_name, event_date=event_date, event_desc=event_desc,
                                              is_signup_open_str=is_signup_open_str, event_limit=event_limit) +
                "üõé–°—Ç–∞—Ç—É—Å : –ø–æ–π–¥—É\n" +
                registered_users_str,
                parse_mode="HTML",
                reply_markup=await kb.get_event_menu(rights="user", event_status="signed", event_name=event_name)
            )
        else:
            await message.answer(
                event_info_for_message.format(event_name=event_name, event_date=event_date, event_desc=event_desc,
                                              is_signup_open_str=is_signup_open_str, event_limit=event_limit) +
                user_data_str.format(signup_user_full_name=signup_user_full_name) +
                f"\nüõé–°—Ç–∞—Ç—É—Å : –Ω–µ –ø–æ–π–¥—É"
                f"\n\n{registered_users_str}",
                parse_mode="HTML",
                reply_markup=await kb.get_event_menu(rights="user", event_name=event_name)
            )


@user.message(F.text == "‚ùå–Ø –Ω–µ –ø—Ä–∏–¥—É", EventSignUp.event_name)
async def btn_dont_go_to_the_event_click(message: Message, state: FSMContext):
    data_from_state: dict = await state.get_data()
    event_name: str = data_from_state.get("event_name")
    chat_id = message.from_user.id
    if await check_signup(event_name=event_name, chat_id=chat_id) is None:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
    else:
        if await check_go_to_event(event_name=event_name, chat_id=chat_id) is not None:
            await state.update_data(id=chat_id)
            await message.answer("–í—ã —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–π–¥—ë—Ç–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
                                 #  "\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ"
                                 #  " –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!",
                                 reply_markup=await kb.get_confirm_menu("cofirm_dont_go_to_event"))
        else:
            await message.answer("–í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å!")


# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ


@user.callback_query(EventSignUp.event_name)
async def confirm_signup_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    if callback.data == "cofirm_dont_go_to_event":
        data_from_state: dict = await state.get_data()
        event_name: str = data_from_state.get("event_name")
        chat_id: str = data_from_state.get("id")
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ 0 (–æ—Ç–º–µ–Ω–µ–Ω–æ)
        await change_signup_status(event_name=event_name, chat_id=chat_id)
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å!", reply_markup=await kb.get_events_names_buttons())
        await state.clear()
    else:
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ!",
                                      reply_markup=await kb.get_event_menu(rights="user", event_status="signed"))


# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è


@user.message(F.text == "üîô–ù–∞–∑–∞–¥")
async def btn_exit_from_events_click(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞–∑–∞–¥", reply_markup=await kb.get_events_names_buttons())


@user.message(F.text == "üìù–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", EventSignUp.event_name)
async def btn_signup_click(message: Message, state: FSMContext):
    data_from_state: dict = await state.get_data()
    event_name: str = data_from_state.get("event_name")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞-–ª–∏ –∑–∞–ø–∏—Å—å
    if await check_is_signup_open(event_name=event_name) is not None:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–ø–æ—Ä–∏—è—Ç–∏–µ
        if await check_signup(event_name=event_name, chat_id=message.from_user.id) is None:
            signuped_users = await get_signup_people(event_name=event_name)
            current_signups = len(signuped_users["–ü–æ–ª–Ω–æ–µ –∏–º—è"])
            event_info = await get_event_info_by_name(event_name=event_name)
            user_profile = await get_user_profile(chat_id=message.from_user.id)
            if not user_profile:
                await message.answer(
                    "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'",
                    reply_markup=await kb.get_start_menu(rights="user")
                )
            elif not user_profile.is_itmo:
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∫–∏
                if await check_passes_sent(event_name=event_name):
                    await message.answer("–ó–∞–ø–∏—Å—å –≥–æ—Å—Ç–µ–π –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∞ - –ø—Ä–æ—Ö–æ–¥–∫–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                    return
                
                if not all([user_profile.full_name, user_profile.passport, user_profile.phone]):
                    await message.answer("–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û, –ø–∞—Å–ø–æ—Ä—Ç –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. "
                                         "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∫–∏ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç.")
                    return

                guest_count = await get_guest_count_for_event(event_name)
                if guest_count >= event_info.guest_limit:
                    await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–æ—Å—Ç–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
                    return

            elif current_signups >= event_info.limit:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

            # –ø–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = await get_user_profile(chat_id=message.from_user.id)
            print(user_profile.__dict__, '\n\n')
            await state.update_data(full_name=user_profile.nickname,
                                    id=message.from_user.id,
                                    level=user_profile.level,
                                    username=message.from_user.username)
            level_symbol = kb.get_level_info_by_id(
                user_profile.level)['level_symbol']
            await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
                                 f"\nüéâ–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {event_name}"
                                 f"\nüìí–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ : "
                                 f"\nüë§–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫ : {user_profile.nickname}"
                                 f"\nüë§–£—Ä–æ–≤–µ–Ω—å : {level_symbol}"
                                 f"\nüë§–í–∞—à Telegram –Ω–∏–∫ : @{message.from_user.username}",
                                 reply_markup=await kb.get_confirm_menu("confirm_signup"))
            await state.set_state(EventSignUp.confirm)

        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–ø–æ—Ä–∏—è—Ç–∏–µ!")
    else:
        await message.answer("–ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!")


# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@user.callback_query(EventSignUp.confirm)
async def confirm_signup_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    if callback.data == "confirm_signup":
        data_from_state: dict = await state.get_data()
        event_name: str = data_from_state.get("event_name")
        user_full_name: str = data_from_state.get("full_name")
        username: str = data_from_state.get("username")

        user_chat_id: str = data_from_state.get("id")
        user_level = data_from_state.get("level")
        user = await get_user_profile(chat_id=int(user_chat_id))

        await add_signup_user(
            event_name=event_name,
            full_name=user_full_name,
            chat_id=user_chat_id,
            username=username,
            level=user_level
        )
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!", reply_markup=await kb.get_events_names_buttons())
        await state.clear()
    else:
        await callback.message.answer("–û—Ç–º–µ–Ω—è—é –∑–∞–ø–∏—Å—å!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ —Å–Ω–æ–≤–∞.",
                                      reply_markup=await kb.get_user_cancel_button())
        await state.set_state(EventSignUp.full_name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è


@user.message(F.text == "üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def edit_profile(message: Message, state: FSMContext):
    user_profile = await get_user_profile(chat_id=message.from_user.id)
    message_to_send = ""
    if user_profile:
        profile_text = f"""–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {user_profile.nickname}
        –£—Ä–æ–≤–µ–Ω—å: {kb.get_level_info_by_id(user_profile.level)['level_name']}
        –ò–∑ –ò–¢–ú–û: {user_profile.is_itmo}
        Polemica id: {user_profile.polemica_id}
        """
        message_to_send = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n{profile_text}\n–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è...\n\n"
    await message.answer(message_to_send + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:", reply_markup=await kb.get_user_cancel_button())
    await state.set_state(ProfileEdit.nickname)


@user.message(ProfileEdit.nickname)
async def process_nickname(message: Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await message.answer("–í—ã –∏–∑ –ò–¢–ú–û?", reply_markup=kb.are_u_from_itmo_keyboard)
    await state.set_state(ProfileEdit.is_itmo)


@user.message(ProfileEdit.is_itmo)
async def process_is_itmo(message: Message, state: FSMContext):
    if message.text not in ["–î–∞, —è –∏–∑ –ò–¢–ú–û", "–ù–µ—Ç, —è –Ω–µ –∏–∑ –ò–¢–ú–û"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞, —è –∏–∑ –ò–¢–ú–û' –∏–ª–∏ '–ù–µ—Ç, —è –Ω–µ –∏–∑ –ò–¢–ú–û'.")
        return

    is_itmo = message.text == "–î–∞, —è –∏–∑ –ò–¢–ú–û"
    await state.update_data(is_itmo=is_itmo)

    if not is_itmo:
        await message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∫–∏ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=await kb.get_user_cancel_button())
        await state.set_state(ProfileEdit.full_name)
    else:
        await message.answer(
            '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π id —Å —Å–∞–π—Ç–∞ Polemica. –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å "-"',
            reply_markup=await kb.get_user_cancel_button(),
            parse_mode="HTML"
        )
        await state.set_state(ProfileEdit.polemica_id)
    
    
@user.message(ProfileEdit.full_name)
async def process_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (10 —Ü–∏—Ñ—Ä):", reply_markup=await kb.get_user_cancel_button())
    await state.set_state(ProfileEdit.passport)


@user.message(ProfileEdit.passport)
async def process_passport(message: Message, state: FSMContext):
    if len(message.text) == 10 and message.text.isdigit():
        await state.update_data(passport=message.text)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8). –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∫–∏:", reply_markup=await kb.get_user_cancel_button())
        await state.set_state(ProfileEdit.phone)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä.")


@user.message(ProfileEdit.phone)
async def process_phone(message: Message, state: FSMContext):
    if len(message.text) == 11 and message.text.isdigit() and message.text.startswith('8'):
        await state.update_data(phone=message.text)
        await message.answer(
            '–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –§–ó-152.',
            reply_markup=await kb.get_personal_data_agreement_keyboard(),
        )
        await state.set_state(ProfileEdit.personal_data_agreement)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8.")

@user.message(ProfileEdit.personal_data_agreement)
async def process_personal_data_agreement(message: Message, state: FSMContext):
    if message.text == "‚úÖ–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ":
        await state.update_data(personal_data_agreement=True)
        await message.answer(
            '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π id —Å —Å–∞–π—Ç–∞ Polemica. –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å "-"',
            reply_markup=await kb.get_user_cancel_button(),
            parse_mode="HTML"
        )
        await state.set_state(ProfileEdit.polemica_id)
    else:
        await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")


@user.message(ProfileEdit.polemica_id)
async def process_polemica_id(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(polemica_id=int(message.text))

    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å. –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –µ—Å—Ç—å –≤ <a href="https://t.me/mafia_itmo/64">–ø–æ—Å—Ç–µ</a>',
        reply_markup=await kb.get_level_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ProfileEdit.level)


@user.callback_query(ProfileEdit.level)
async def process_level(callback: CallbackQuery, state: FSMContext):
    level_id = int(callback.data.split("_")[1])
    selected_level = next(
        (lvl for lvl in kb.LEVEL_DESCR if lvl["level_id"] == level_id), None)

    if selected_level:
        await state.update_data(level=selected_level)
        data = await state.get_data()

        nickname = data['nickname']
        is_itmo = data['is_itmo']
        level_data = data['level']
        polemica_id = data.get("polemica_id", None)

        full_name = data.get("full_name")
        passport = data.get("passport")
        phone = data.get("phone")
        username = callback.from_user.username

        await save_user_profile(
            chat_id=callback.from_user.id,
            nickname=nickname,
            is_itmo=is_itmo,
            level=level_data['level_id'],
            polemica_id=polemica_id,
            full_name=full_name,
            passport=passport,
            phone=phone,
            username=username
        )

        profile_info = f"""
            –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: <b>{nickname}</b>
            –£—Ä–æ–≤–µ–Ω—å: <b>{level_data['level_name']}</b>
            –ò–¢–ú–û: <b>{'–î–∞' if is_itmo else '–ù–µ—Ç'}</b>
            Polemica id: <b>{polemica_id if polemica_id is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}</b>
            """

        if not is_itmo:
            profile_info += f"""
            –§–ò–û: <b>{full_name}</b>
            –ü–∞—Å–ø–æ—Ä—Ç: <b>{passport}</b>
            –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>
            """

        await callback.message.answer(
            f"‚≠êÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n{profile_info}",
            parse_mode="HTML",
            reply_markup=await kb.get_start_menu(rights="user")
        )
        await callback.answer()
        await state.clear()
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()

# —Å—Ç–∞—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äì –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ

# @user.message(EventSignUp.full_name)
# async def wait_full_name(message: Message, state: FSMContext):
#     if message.text is not None:
#         await state.update_data(full_name=message.text)
#         await message.answer(
#             '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å. –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –µ—Å—Ç—å –≤ <a href="https://t.me/mafia_itmo/64">–ø–æ—Å—Ç–µ</a>',
#             reply_markup=await kb.get_level_keyboard(),
#             parse_mode="HTML"
#         )
#         await state.set_state(EventSignUp.level)
#     else:
#         await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")


# @ user.callback_query(EventSignUp.level)
# async def level_selection_callback(callback: CallbackQuery, state: FSMContext):
#     # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
#     level_id = int(callback.data.split("_")[1])
#     selected_level = next(
#         (lvl for lvl in kb.LEVEL_DESCR if lvl["level_id"] == level_id), None)

#     if selected_level:
#         await state.update_data(level=selected_level)
#         await state.update_data(id=callback.from_user.id)
#         data_from_state: dict = await state.get_data()
#         event_name: str = data_from_state.get("event_name")
#         username = callback.from_user.username if callback.from_user.username else "No username"
#         await state.update_data(username=username)
#         full_name: str = data_from_state.get("full_name")
#         user_level_dict: dict = data_from_state.get("level")
#         await callback.message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
#                                       f"\nüéâ–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è : {event_name}"
#                                       f"\nüìí–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ : "
#                                       f"\nüë§–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫ : {full_name}"
#                                       f"\nüë§–£—Ä–æ–≤–µ–Ω—å : {user_level_dict['level_symbol']}"
#                                       f"\nüë§–í–∞—à Telegram –Ω–∏–∫ : @{username}",
#                                       reply_markup=await kb.get_confirm_menu("confirm_signup"))
#         await state.set_state(EventSignUp.confirm)
#     else:
#         await callback.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
